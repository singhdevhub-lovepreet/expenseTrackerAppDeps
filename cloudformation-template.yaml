AWSTemplateFormatVersion: '2010-09-09'
Description: 'Autoscaling group for microservices with Kong, MySQL, and Kafka'

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Type: String
    Default: t3.medium
  AMI:
    Type: AWS::EC2::Image::Id
  MySQLRootPassword:
    Type: String
    NoEcho: true
  MySQLUser:
    Type: String
  MySQLRootUser:
    Type: String
  MySQLPassword:
    Type: String
    NoEcho: true
  KafkaAdvertisedListeners:
    Type: String
    Default: PLAINTEXT://localhost:9092
  KongConfigBucket:
    Type: String
    Description: S3 bucket containing Kong configuration and plugins
  KongImage:
    Type: String
    Description: Kong image built in GitHub actions

Resources:
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: myapp.local
      Vpc: !Ref VPC

  KafkaService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: kafka
      DnsConfig:
        NamespaceId: !Ref ServiceDiscoveryNamespace
        DnsRecords:
          - Type: A
            TTL: 300

  MySQLService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mysql
      DnsConfig:
        NamespaceId: !Ref ServiceDiscoveryNamespace
        DnsRecords:
          - Type: A
            TTL: 300

  KongService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: kong
      DnsConfig:
        NamespaceId: !Ref ServiceDiscoveryNamespace
        DnsRecords:
          - Type: A
            TTL: 300

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            mkdir -p /app/kong/config /app/kong/custom-plugins
            aws s3 ls s3://${KongConfigBucket}/kong.yml || aws s3 cp s3://${KongConfigBucket}/kong.yml /app/kong/config/kong.yml
            aws s3 ls s3://${KongConfigBucket}/custom-plugins/ || aws s3 cp s3://${KongConfigBucket}/custom-plugins/ /app/kong/custom-plugins/ --recursive
            
            # Install AWS CLI
            yum install -y aws-cli
            
            # Get instance ID and IP
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            # Register with Cloud Map
            aws servicediscovery register-instance --service-id ${KafkaService} --instance-id $INSTANCE_ID --attributes AWS_INSTANCE_IPV4=$INSTANCE_IP
            aws servicediscovery register-instance --service-id ${MySQLService} --instance-id $INSTANCE_ID --attributes AWS_INSTANCE_IPV4=$INSTANCE_IP
            aws servicediscovery register-instance --service-id ${KongService} --instance-id $INSTANCE_ID --attributes AWS_INSTANCE_IPV4=$INSTANCE_IP
            
            # Create directories for Docker Compose files
            mkdir -p /app/kong /app/mysql /app/kafka
            
            # Kong Docker Compose
            cat << EOF > /app/kong/docker-compose.yml
            version: '3.3'
            services:
              kong-service:
                image: ${KongImage}
                volumes:
                  - "./config:/usr/local/kong/declarative"
                  - "./custom-plugins:/usr/local/share/lua/5.1/kong/plugins"
                environment:
                  KONG_DATABASE: "off"
                  KONG_DECLARATIVE_CONFIG: "/usr/local/kong/declarative/kong.yml"
                  KONG_PROXY_ACCESS_LOG: "/dev/stdout"
                  KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
                  KONG_PROXY_ERROR_LOG: "/dev/stderr"
                  KONG_ADMIN_ERROR_LOG: "/dev/stderr"
                  KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
                ports:
                  - "8000:8000"
                  - "8443:8443"
                  - "8001:8001"
                  - "8444:8444"
            EOF
            
            # MySQL Docker Compose
            cat << EOF > /app/mysql/docker-compose.yml
            version: '3'
            services:
              mysql:
                image: mysql:8.3.0
                environment:
                  MYSQL_ROOT_PASSWORD: ${MySQLRootPassword}
                  MYSQL_USER: ${MySQLUser}
                  MYSQL_ROOT_USER: ${MySQLRootUser}
                  MYSQL_PASSWORD: ${MySQLPassword}
                volumes:
                  - /data/mysql:/var/lib/mysql
                ports:
                  - 3306:3306
            EOF
            
            # Kafka Docker Compose
            cat << EOF > /app/kafka/docker-compose.yml
            version: '3'
            services:
              zookeeper:
                image: confluentinc/cp-zookeeper:7.4.4
                environment:
                  ZOOKEEPER_CLIENT_PORT: 2181
                  ZOOKEEPER_TICK_TIME: 2000
                ports:
                  - 2181:2181
              kafka:
                image: confluentinc/cp-kafka:7.4.4
                depends_on:
                  - zookeeper
                ports:
                  - 9092:9092
                environment:
                  KAFKA_BROKER_ID: 1
                  KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://$INSTANCE_IP:9092
                  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                  KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            EOF
            
            # Start the services
            cd /app/kong && docker-compose up -d
            cd /app/mysql && docker-compose up -d
            cd /app/kafka && docker-compose up -d

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:

#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          CidrIp: <Your-Trusted-IP-Range>

        # Allow Kong Proxy access from any IP
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0

        # Allow Kong Admin access from a trusted IP range
#        - IpProtocol: tcp
#          FromPort: 8001
#          ToPort: 8001
#          CidrIp: <Your-Trusted-IP-Range>  # Replace with your trusted IP range
#        - IpProtocol: tcp
#          FromPort: 8444
#          ToPort: 8444
#          CidrIp: <Your-Trusted-IP-Range>  # Replace with your trusted IP range

        # Restrict MySQL access to internal subnets
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref VPCCIDR

        # Restrict Kafka and Zookeeper access to internal subnets
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: !Ref VPCCIDR

        # DNS (TCP and UDP) restricted to internal subnets
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  # Target Group for Kong
  KongTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC

  # Update ALB Listener
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref KongTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
  ServiceDiscoveryNamespace:
    Description: Service Discovery Namespace
    Value: myapp.local
  KafkaServiceEndpoint:
    Description: Kafka Service Endpoint
    Value: kafka.myapp.local
  MySQLServiceEndpoint:
    Description: MySQL Service Endpoint
    Value: mysql.myapp.local
  KongServiceEndpoint:
    Description: Kong Service Endpoint
    Value: kong.myapp.local