name: Deploy Microservices

#on:
#  push:
#    branches:
#      - main

env:
  AWS_REGION: ap-south-1

jobs:
  deploy-microservices:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: kong
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}

      - name: Build and push Kong image to Amazon ECR
        id: build-kong
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kong
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./kong
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "kong_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload Kong config and plugins to S3
        run: |
          BUCKET_NAME="kong-config-${{github.sha}}"
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME"; then
            aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
          else
            echo "Bucket $BUCKET_NAME already exists"
          fi
          
          echo "Uploading Kong configuration and plugins to S3"
          aws s3 cp kong/config/kong.yml s3://$BUCKET_NAME/kong.yml
          aws s3 cp kong/custom-plugins s3://$BUCKET_NAME/custom-plugins --recursive

      - name: Download infrastructure outputs from S3
        run: |
          aws s3 cp s3://expensetrackerinfra/infrastructure-outputs.json infrastructure-outputs.json
          cat infrastructure-outputs.json

      - name: Deploy Microservices Stack
        env:
          VPC_ID: $(jq -r '.[] | select(.OutputKey=="VpcId") | .OutputValue' infrastructure-outputs.json)
          SUBNET_1: $(jq -r '.[] | select(.OutputKey=="PublicSubnetOne") | .OutputValue' infrastructure-outputs.json)
          SUBNET_2: $(jq -r '.[] | select(.OutputKey=="PublicSubnetTwo") | .OutputValue' infrastructure-outputs.json)
          ECS_CLUSTER_NAME: $(jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue' infrastructure-outputs.json)
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_ROOT_USER: ${{ secrets.MYSQL_ROOT_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          KONG_IMAGE: ${{ steps.build-kong.outputs.kong_image }}
          KONG_CONFIG_BUCKET: kong-config-${{ github.sha }}
        run: |
          aws cloudformation deploy \
            --template-file microservices-template.yaml \
            --stack-name microservices-stack \
            --parameter-overrides \
              VPC=${VPC_ID} \
              Subnets=${SUBNET_1},${SUBNET_2} \
              ECSClusterName=${ECS_CLUSTER_NAME} \
              MySQLRootPassword=${MYSQL_ROOT_PASSWORD} \
              MySQLUser=${MYSQL_USER} \
              MySQLRootUser=${MYSQL_ROOT_USER} \
              MySQLPassword=${MYSQL_PASSWORD} \
              KongImage=${KONG_IMAGE} \
              KongConfigBucket=${KONG_CONFIG_BUCKET} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Output Microservices Stack Info
        run: |
          aws cloudformation describe-stacks \
            --stack-name microservices-stack \
            --query 'Stacks[].Outputs[]' \
            --output table
